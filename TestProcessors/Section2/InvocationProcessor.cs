namespace TestProcessors;

public class InvocationProcessor : ITestProcessor
{
    public void Execute()
    {
        Console.WriteLine("Invocation demonstration:");

        var str = "abracadabra    ";
        var strType = typeof(string);
        var trimMethod = strType.GetMethod("Trim", Array.Empty<Type>());
        var trimmedStr = trimMethod?.Invoke(str, Array.Empty<object>());

        //int.TryParse(string str, out int number);
        var numberStr = "123";
        var parseMethod = typeof(int).GetMethod("TryParse", new[] { typeof(string), typeof(int).MakeByRefType() });  //specify out parameter
        var methodParams = new object[] { numberStr, null };  //second is null because it is out ref (should be replaced by method)
        var methodResult = parseMethod?.Invoke(null, methodParams); //null because it is static method
        Console.WriteLine($"TryParse {numberStr} operation completed: {methodResult} and result is {methodParams[1]}");

        //use generic method
        var at = typeof(Activator);
        var method = at.GetMethod("CreateInstance", Array.Empty<Type>());
        var genericMethod = method?.MakeGenericMethod(typeof(Guid));
        var guid = genericMethod?.Invoke(null, null);
        Console.WriteLine($"Guid generated by generic method: {guid}");
    }

}